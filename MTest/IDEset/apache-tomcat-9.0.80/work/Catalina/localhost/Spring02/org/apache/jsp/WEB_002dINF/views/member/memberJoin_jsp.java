/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.80
 * Generated at: 2023-10-31 03:08:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class memberJoin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1697680650000L));
    _jspx_dependants.put("jar:file:/D:/kdt4_ehs/MTest/IDEset/apache-tomcat-9.0.80/webapps/Spring02/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fif_0026_005ftest;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>** Spring_MVC2 Member Join **</title>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"/Spring02/resources/myStyle.css\">\r\n");
      out.write("<script src=\"/Spring02/resources/jquery-3.2.1.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h2>** Spring_MVC2 Member Join **</h2>\r\n");
      out.write("	\r\n");
      out.write("	<!--  ** FileUpLoad Form **\r\n");
      out.write("	=> form과 table Tag 사용시 주의사항 : form 내부에 table 사용해야함\r\n");
      out.write("	   -> form 단위작업시 인식안됨\r\n");
      out.write("	   -> JQ의 serialize, FormData의 append all 등\r\n");
      out.write("	\r\n");
      out.write("	=> method=\"Post\" : 255 byte 이상 대용량 전송 가능하므로\r\n");
      out.write("	\r\n");
      out.write("	=> <form enctype=\"속성값\">\r\n");
      out.write("	   <form> 태그의 데이터 (input의 value)가 서버로 제출될 때 해당 데이터가 인코딩되는 방법을 명시함\r\n");
      out.write("	 \r\n");
      out.write("	=> enctype=\"multipart/form-data\" : 파일 upload를 가능하게 해줌\r\n");
      out.write("	   ** multipart/form-data는 파일업로드가 있는 입력양식요소에 사용되는 enctype 속성의 값 중 하나이고,\r\n");
      out.write("	       multipart는 폼데이터가 여러 부분으로 나뉘어 서버로 전송되는 것을 의미\r\n");
      out.write("	       이 폼이 제출될 때 이 형식을 서버에 알려주며,\r\n");
      out.write("	       multipart/form-data로 지정이 되어 있어야 서버에서 정상적으로 데이터를 처리할 수 있음   \r\n");
      out.write("	-->\r\n");
      out.write("	\r\n");
      out.write("	<form action=\"join\" method=\"Post\" enctype=\"multipart/form-data\">\r\n");
      out.write("		<table>\r\n");
      out.write("			<tr height=\"40\">\r\n");
      out.write("				<th bgcolor=\"pink\">I D</th>\r\n");
      out.write("				<td><input type=\"text\" name=\"id\" placeholder=\"영어, 10글자 이내\"\r\n");
      out.write("					size=\"20\"></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr height=\"40\">\r\n");
      out.write("				<th bgcolor=\"pink\">Password</th>\r\n");
      out.write("				<td><input type=\"password\" name=\"password\" placeholder=\"영어, 숫자, 특수문자\"\r\n");
      out.write("					size=\"20\"></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr height=\"40\">\r\n");
      out.write("				<th bgcolor=\"pink\">Name</th>\r\n");
      out.write("				<td><input type=\"text\" name=\"name\" placeholder=\"한글 또는 영어\"\r\n");
      out.write("					size=\"20\"></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr height=\"40\">\r\n");
      out.write("				<th bgcolor=\"pink\">Age</th>\r\n");
      out.write("				<td><input type=\"text\" name=\"age\" placeholder=\"숫자입력\" size=\"20\"></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("\r\n");
      out.write("			<tr height=\"40\">\r\n");
      out.write("				<th bgcolor=\"pink\">Jno</th>\r\n");
      out.write("				<td>\r\n");
      out.write("					<select name=\"jno\">\r\n");
      out.write("						<option value=\"1\">1조 : 119조</option>\r\n");
      out.write("						<option value=\"2\">2조 : 여우조</option>\r\n");
      out.write("						<option value=\"3\">3조 : 최고조</option>\r\n");
      out.write("						<option value=\"4\">4조 : i4</option>\r\n");
      out.write("						<option value=\"5\">5조 : 오조</option>\r\n");
      out.write("						<option value=\"5\">7조 : 관리팀</option>\r\n");
      out.write("					</select>\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("\r\n");
      out.write("			<tr height=\"40\">\r\n");
      out.write("				<th bgcolor=\"pink\">Info</th>\r\n");
      out.write("				<td><input type=\"text\" name=\"info\" placeholder=\"반드시 입력하세요\"\r\n");
      out.write("					size=\"20\"></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr height=\"40\">\r\n");
      out.write("				<th bgcolor=\"pink\">Point</th>\r\n");
      out.write("				<td><input type=\"text\" name=\"point\" placeholder=\"실수입력\"\r\n");
      out.write("					size=\"20\"></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr height=\"40\">\r\n");
      out.write("				<th bgcolor=\"pink\">Birthday</th>\r\n");
      out.write("				<td><input type=\"date\" name=\"birthday\" size=\"20\"></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr height=\"40\">\r\n");
      out.write("				<th bgcolor=\"pink\">추천인</th>\r\n");
      out.write("				<td><input type=\"text\" name=\"rid\" size=\"20\"></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr height=\"40\">\r\n");
      out.write("				<th bgcolor=\"pink\">Image</th>\r\n");
      out.write("				<td><img src=\"\" class=\"select_img\">\r\n");
      out.write("				<input type=\"file\" name=\"uploadfilef\" id=\"uploadfilef\" size=\"20\"></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			\r\n");
      out.write("			<script>\r\n");
      out.write("			// 해당 파일의 서버상의 경로를 src로 지정하는것으로는 클라이언트 영역에서 이미지는 표시될 수 없기 때문에\r\n");
      out.write("			// 이를 해결하기 위해 FileReader이라는 Web API를 사용\r\n");
      out.write("			// => 이를 통해 url data를 얻을 수 있음\r\n");
      out.write("			//    (https://developer.mozilla.org/ko/docs/Web/API/FileReader)\r\n");
      out.write("			// ** FileReader\r\n");
      out.write("			// => 웹 애플리케이션이 비동기적으로 데이터를 읽기 위하여,\r\n");
      out.write("			//    읽을 파일을 가리키는File 혹은 Blob 객체를 이용해 파일의 내용을(혹은 raw data버퍼로) 읽고\r\n");
      out.write("			//    사용자의 컴퓨터에 저장하는 것을 가능하게 해줌\r\n");
      out.write("			// => FileReader.readAsDataURL()\r\n");
      out.write("			//    지정된 Blob의 내용 읽기를 시작하고, 완료되면 result 속성에 파일 데이터를 나타내는 data: URL이 포함됨\r\n");
      out.write("			// => FileReader.onload 이벤트의 핸들러\r\n");
      out.write("			//    읽기 동작이 성공적으로 완료 되었을 때마다 발생\r\n");
      out.write("			// => e.target : 이벤트를 유발시킨 DOM 객체\r\n");
      out.write("			// => type=\"file\" 은 복수개의 파일을 업로드할수 있도록 설계됨\r\n");
      out.write("			//    그러므로 files[] 배열 형태의 속성을 가짐\r\n");
      out.write("			\r\n");
      out.write("			window.document.getElementById('uploadfilef').onchange=function(e){\r\n");
      out.write("			//$('#uploadfilef').change(function(){\r\n");
      out.write("			// => window.jquery('#uploadfilef').~.~.~\r\n");
      out.write("			//		- JS에서 window 객체는 생략 가능\r\n");
      out.write("			//		- jquery 함수를 $ 기호로 간편하게 사용\r\n");
      out.write("			   if(this.files && this.files[0]) {\r\n");
      out.write("			      let reader = new FileReader;\r\n");
      out.write("			      reader.readAsDataURL(this.files[0]);\r\n");
      out.write("			      reader.onload = function(e) {\r\n");
      out.write("			            $(\".select_img\").attr(\"src\", e.target.result)\r\n");
      out.write("			                        .width(70).height(90);\r\n");
      out.write("			            // => jQuery를 사용하지 않는경우 \r\n");
      out.write("						//    class 속성 사용시에는 복수선택이 가능하므로 인덱스 사용해야함 \r\n");
      out.write("			            //document.getElementsByClassName('select_img')[0].src=e.target.result;\r\n");
      out.write("\r\n");
      out.write("			         }\r\n");
      out.write("			    } // if   \r\n");
      out.write("			}; //change  -> }); JQ 사용시   \r\n");
      out.write("			</script>   \r\n");
      out.write("			\r\n");
      out.write("			<tr height=\"40\">\r\n");
      out.write("				<th></th>\r\n");
      out.write("				<td>\r\n");
      out.write("					<input type=\"submit\" value=\"가입\">&nbsp;&nbsp;&nbsp;\r\n");
      out.write("					<input type=\"reset\" value=\"취소\">\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</table>\r\n");
      out.write("	</form>\r\n");
      out.write("	<hr>\r\n");
      out.write("	");
      if (_jspx_meth_c_005fif_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("	<hr>\r\n");
      out.write("	&nbsp;<a href=\"javascript:history.go(-1)\">이전으로</a> &nbsp;\r\n");
      out.write("	&nbsp;<a href=\"/Spring02/home\">Home</a>&nbsp;\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fif_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f0 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f0_reused = false;
    try {
      _jspx_th_c_005fif_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f0.setParent(null);
      // /WEB-INF/views/member/memberJoin.jsp(139,1) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty requestScope.message}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f0 = _jspx_th_c_005fif_005f0.doStartTag();
      if (_jspx_eval_c_005fif_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("		=> ");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${message}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write('\r');
          out.write('\n');
          out.write('	');
          int evalDoAfterBody = _jspx_th_c_005fif_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
      _jspx_th_c_005fif_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f0_reused);
    }
    return false;
  }
}
